// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/proxy (interfaces: Service)

// Package mock_proxy is a generated GoMock package.
package mock_proxy

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apps "github.com/mattermost/mattermost-plugin-apps/apps"
	appclient "github.com/mattermost/mattermost-plugin-apps/apps/appclient"
	config "github.com/mattermost/mattermost-plugin-apps/server/config"
	incoming "github.com/mattermost/mattermost-plugin-apps/server/incoming"
	proxy "github.com/mattermost/mattermost-plugin-apps/server/proxy"
	upstream "github.com/mattermost/mattermost-plugin-apps/upstream"
	utils "github.com/mattermost/mattermost-plugin-apps/utils"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddBuiltinUpstream mocks base method.
func (m *MockService) AddBuiltinUpstream(arg0 apps.AppID, arg1 upstream.Upstream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBuiltinUpstream", arg0, arg1)
}

// AddBuiltinUpstream indicates an expected call of AddBuiltinUpstream.
func (mr *MockServiceMockRecorder) AddBuiltinUpstream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBuiltinUpstream", reflect.TypeOf((*MockService)(nil).AddBuiltinUpstream), arg0, arg1)
}

// CanDeploy mocks base method.
func (m *MockService) CanDeploy(arg0 apps.DeployType) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanDeploy", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CanDeploy indicates an expected call of CanDeploy.
func (mr *MockServiceMockRecorder) CanDeploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanDeploy", reflect.TypeOf((*MockService)(nil).CanDeploy), arg0)
}

// Configure mocks base method.
func (m *MockService) Configure(arg0 config.Config, arg1 utils.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockServiceMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockService)(nil).Configure), arg0, arg1)
}

// DisableApp mocks base method.
func (m *MockService) DisableApp(arg0 *incoming.Request, arg1 apps.Context, arg2 apps.AppID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableApp indicates an expected call of DisableApp.
func (mr *MockServiceMockRecorder) DisableApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableApp", reflect.TypeOf((*MockService)(nil).DisableApp), arg0, arg1, arg2)
}

// EnableApp mocks base method.
func (m *MockService) EnableApp(arg0 *incoming.Request, arg1 apps.Context, arg2 apps.AppID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableApp indicates an expected call of EnableApp.
func (mr *MockServiceMockRecorder) EnableApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableApp", reflect.TypeOf((*MockService)(nil).EnableApp), arg0, arg1, arg2)
}

// GetBindings mocks base method.
func (m *MockService) GetBindings(arg0 *incoming.Request, arg1 apps.Context) ([]apps.Binding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindings", arg0, arg1)
	ret0, _ := ret[0].([]apps.Binding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindings indicates an expected call of GetBindings.
func (mr *MockServiceMockRecorder) GetBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindings", reflect.TypeOf((*MockService)(nil).GetBindings), arg0, arg1)
}

// GetInstalledApp mocks base method.
func (m *MockService) GetInstalledApp(arg0 apps.AppID, arg1 bool) (*apps.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledApp", arg0, arg1)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledApp indicates an expected call of GetInstalledApp.
func (mr *MockServiceMockRecorder) GetInstalledApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledApp", reflect.TypeOf((*MockService)(nil).GetInstalledApp), arg0, arg1)
}

// GetInstalledApps mocks base method.
func (m *MockService) GetInstalledApps(arg0 *incoming.Request, arg1 bool) ([]apps.App, map[apps.AppID]bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledApps", arg0, arg1)
	ret0, _ := ret[0].([]apps.App)
	ret1, _ := ret[1].(map[apps.AppID]bool)
	return ret0, ret1
}

// GetInstalledApps indicates an expected call of GetInstalledApps.
func (mr *MockServiceMockRecorder) GetInstalledApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledApps", reflect.TypeOf((*MockService)(nil).GetInstalledApps), arg0, arg1)
}

// GetListedApps mocks base method.
func (m *MockService) GetListedApps(arg0 string, arg1 bool) []apps.ListedApp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListedApps", arg0, arg1)
	ret0, _ := ret[0].([]apps.ListedApp)
	return ret0
}

// GetListedApps indicates an expected call of GetListedApps.
func (mr *MockServiceMockRecorder) GetListedApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListedApps", reflect.TypeOf((*MockService)(nil).GetListedApps), arg0, arg1)
}

// GetManifest mocks base method.
func (m *MockService) GetManifest(arg0 apps.AppID) (*apps.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", arg0)
	ret0, _ := ret[0].(*apps.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockServiceMockRecorder) GetManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockService)(nil).GetManifest), arg0)
}

// InstallApp mocks base method.
func (m *MockService) InstallApp(arg0 *incoming.Request, arg1 apps.Context, arg2 apps.AppID, arg3 apps.DeployType, arg4 bool, arg5 string) (*apps.App, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallApp", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*apps.App)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstallApp indicates an expected call of InstallApp.
func (mr *MockServiceMockRecorder) InstallApp(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallApp", reflect.TypeOf((*MockService)(nil).InstallApp), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InvokeCall mocks base method.
func (m *MockService) InvokeCall(arg0 *incoming.Request, arg1 apps.CallRequest) proxy.CallResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeCall", arg0, arg1)
	ret0, _ := ret[0].(proxy.CallResponse)
	return ret0
}

// InvokeCall indicates an expected call of InvokeCall.
func (mr *MockServiceMockRecorder) InvokeCall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeCall", reflect.TypeOf((*MockService)(nil).InvokeCall), arg0, arg1)
}

// InvokeCompleteRemoteOAuth2 mocks base method.
func (m *MockService) InvokeCompleteRemoteOAuth2(arg0 *incoming.Request, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeCompleteRemoteOAuth2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeCompleteRemoteOAuth2 indicates an expected call of InvokeCompleteRemoteOAuth2.
func (mr *MockServiceMockRecorder) InvokeCompleteRemoteOAuth2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeCompleteRemoteOAuth2", reflect.TypeOf((*MockService)(nil).InvokeCompleteRemoteOAuth2), arg0, arg1)
}

// InvokeGetBindings mocks base method.
func (m *MockService) InvokeGetBindings(arg0 *incoming.Request, arg1 apps.Context) ([]apps.Binding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeGetBindings", arg0, arg1)
	ret0, _ := ret[0].([]apps.Binding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeGetBindings indicates an expected call of InvokeGetBindings.
func (mr *MockServiceMockRecorder) InvokeGetBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeGetBindings", reflect.TypeOf((*MockService)(nil).InvokeGetBindings), arg0, arg1)
}

// InvokeGetRemoteOAuth2ConnectURL mocks base method.
func (m *MockService) InvokeGetRemoteOAuth2ConnectURL(arg0 *incoming.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeGetRemoteOAuth2ConnectURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeGetRemoteOAuth2ConnectURL indicates an expected call of InvokeGetRemoteOAuth2ConnectURL.
func (mr *MockServiceMockRecorder) InvokeGetRemoteOAuth2ConnectURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeGetRemoteOAuth2ConnectURL", reflect.TypeOf((*MockService)(nil).InvokeGetRemoteOAuth2ConnectURL), arg0)
}

// InvokeGetStatic mocks base method.
func (m *MockService) InvokeGetStatic(arg0 *incoming.Request, arg1 string) (io.ReadCloser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeGetStatic", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InvokeGetStatic indicates an expected call of InvokeGetStatic.
func (mr *MockServiceMockRecorder) InvokeGetStatic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeGetStatic", reflect.TypeOf((*MockService)(nil).InvokeGetStatic), arg0, arg1)
}

// InvokeRemoteWebhook mocks base method.
func (m *MockService) InvokeRemoteWebhook(arg0 *incoming.Request, arg1 apps.HTTPCallRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeRemoteWebhook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeRemoteWebhook indicates an expected call of InvokeRemoteWebhook.
func (mr *MockServiceMockRecorder) InvokeRemoteWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeRemoteWebhook", reflect.TypeOf((*MockService)(nil).InvokeRemoteWebhook), arg0, arg1)
}

// NewIncomingRequest mocks base method.
func (m *MockService) NewIncomingRequest(arg0 utils.Logger) *incoming.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIncomingRequest", arg0)
	ret0, _ := ret[0].(*incoming.Request)
	return ret0
}

// NewIncomingRequest indicates an expected call of NewIncomingRequest.
func (mr *MockServiceMockRecorder) NewIncomingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIncomingRequest", reflect.TypeOf((*MockService)(nil).NewIncomingRequest), arg0)
}

// Notify mocks base method.
func (m *MockService) Notify(arg0 apps.Context, arg1 apps.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockServiceMockRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockService)(nil).Notify), arg0, arg1)
}

// NotifyMessageHasBeenPosted mocks base method.
func (m *MockService) NotifyMessageHasBeenPosted(arg0 *model.Post, arg1 apps.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMessageHasBeenPosted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMessageHasBeenPosted indicates an expected call of NotifyMessageHasBeenPosted.
func (mr *MockServiceMockRecorder) NotifyMessageHasBeenPosted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMessageHasBeenPosted", reflect.TypeOf((*MockService)(nil).NotifyMessageHasBeenPosted), arg0, arg1)
}

// NotifyUserHasJoinedChannel mocks base method.
func (m *MockService) NotifyUserHasJoinedChannel(arg0 apps.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUserHasJoinedChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUserHasJoinedChannel indicates an expected call of NotifyUserHasJoinedChannel.
func (mr *MockServiceMockRecorder) NotifyUserHasJoinedChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUserHasJoinedChannel", reflect.TypeOf((*MockService)(nil).NotifyUserHasJoinedChannel), arg0)
}

// NotifyUserHasJoinedTeam mocks base method.
func (m *MockService) NotifyUserHasJoinedTeam(arg0 apps.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUserHasJoinedTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUserHasJoinedTeam indicates an expected call of NotifyUserHasJoinedTeam.
func (mr *MockServiceMockRecorder) NotifyUserHasJoinedTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUserHasJoinedTeam", reflect.TypeOf((*MockService)(nil).NotifyUserHasJoinedTeam), arg0)
}

// NotifyUserHasLeftChannel mocks base method.
func (m *MockService) NotifyUserHasLeftChannel(arg0 apps.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUserHasLeftChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUserHasLeftChannel indicates an expected call of NotifyUserHasLeftChannel.
func (mr *MockServiceMockRecorder) NotifyUserHasLeftChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUserHasLeftChannel", reflect.TypeOf((*MockService)(nil).NotifyUserHasLeftChannel), arg0)
}

// NotifyUserHasLeftTeam mocks base method.
func (m *MockService) NotifyUserHasLeftTeam(arg0 apps.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUserHasLeftTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUserHasLeftTeam indicates an expected call of NotifyUserHasLeftTeam.
func (mr *MockServiceMockRecorder) NotifyUserHasLeftTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUserHasLeftTeam", reflect.TypeOf((*MockService)(nil).NotifyUserHasLeftTeam), arg0)
}

// SynchronizeInstalledApps mocks base method.
func (m *MockService) SynchronizeInstalledApps() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeInstalledApps")
	ret0, _ := ret[0].(error)
	return ret0
}

// SynchronizeInstalledApps indicates an expected call of SynchronizeInstalledApps.
func (mr *MockServiceMockRecorder) SynchronizeInstalledApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeInstalledApps", reflect.TypeOf((*MockService)(nil).SynchronizeInstalledApps))
}

// UninstallApp mocks base method.
func (m *MockService) UninstallApp(arg0 *incoming.Request, arg1 apps.Context, arg2 apps.AppID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallApp indicates an expected call of UninstallApp.
func (mr *MockServiceMockRecorder) UninstallApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallApp", reflect.TypeOf((*MockService)(nil).UninstallApp), arg0, arg1, arg2)
}

// UpdateAppListing mocks base method.
func (m *MockService) UpdateAppListing(arg0 *incoming.Request, arg1 appclient.UpdateAppListingRequest) (*apps.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppListing", arg0, arg1)
	ret0, _ := ret[0].(*apps.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppListing indicates an expected call of UpdateAppListing.
func (mr *MockServiceMockRecorder) UpdateAppListing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppListing", reflect.TypeOf((*MockService)(nil).UpdateAppListing), arg0, arg1)
}
