package proxy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	pluginapi "github.com/mattermost/mattermost-plugin-api"
	"github.com/mattermost/mattermost-server/v6/model"
	"github.com/mattermost/mattermost-server/v6/plugin/plugintest"

	"github.com/mattermost/mattermost-plugin-apps/apps"
	"github.com/mattermost/mattermost-plugin-apps/server/config"
	"github.com/mattermost/mattermost-plugin-apps/server/incoming"
	"github.com/mattermost/mattermost-plugin-apps/server/mocks/mock_store"
	"github.com/mattermost/mattermost-plugin-apps/server/mocks/mock_upstream"
	"github.com/mattermost/mattermost-plugin-apps/server/store"
	"github.com/mattermost/mattermost-plugin-apps/upstream"
	"github.com/mattermost/mattermost-plugin-apps/utils"
)

func TestGetBindingsGrantedLocations(t *testing.T) {
	type TC struct {
		name        string
		locations   apps.Locations
		numBindings int
	}

	for _, tc := range []TC{
		{
			name: "3 locations granted",
			locations: apps.Locations{
				apps.LocationChannelHeader,
				apps.LocationPostMenu,
				apps.LocationCommand,
			},
			numBindings: 3,
		},
		{
			name: "command location granted",
			locations: apps.Locations{
				apps.LocationCommand,
			},
			numBindings: 1,
		},
		{
			name: "channel header location granted",
			locations: apps.Locations{
				apps.LocationChannelHeader,
			},
			numBindings: 1,
		},
		{
			name: "post dropdown location granted",
			locations: apps.Locations{
				apps.LocationPostMenu,
			},
			numBindings: 1,
		},
		{
			name:        "no granted locations",
			locations:   apps.Locations{},
			numBindings: 0,
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			bindings := []apps.Binding{
				{
					Location: apps.LocationChannelHeader,
					Bindings: []apps.Binding{
						{
							Location: "send",
							Label:    "Send",
							Submit:   &apps.Call{Path: "/path"},
						},
					},
				}, {
					Location: apps.LocationPostMenu,
					Bindings: []apps.Binding{
						{
							Location: "send-me",
							Label:    "Send me",
							Submit:   &apps.Call{Path: "/path"},
						},
					},
				}, {
					Location: apps.LocationCommand,
					Bindings: []apps.Binding{
						{
							Location: "ignored",
							Label:    "ignored",
							Submit:   &apps.Call{Path: "/path"},
						},
					},
				},
			}

			app1 := apps.App{
				DeployType: apps.DeployBuiltin,
				Manifest: apps.Manifest{
					AppID:              apps.AppID("app1"),
					DisplayName:        "App 1",
					RequestedLocations: tc.locations,
				},
				GrantedLocations: tc.locations,
			}

			ctrl := gomock.NewController(t)

			testData := []bindingTestData{{
				app:      app1,
				bindings: bindings,
			}}

			proxy := newTestProxyForBindings(t, testData, ctrl)
			r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
			out, err := proxy.GetBindings(r, apps.Context{})
			require.NoError(t, err)
			require.Len(t, out, tc.numBindings)
		})
	}
}

func TestGetBindingsCommands(t *testing.T) {
	app1 := apps.App{
		DeployType: apps.DeployBuiltin,
		Manifest: apps.Manifest{
			AppID:       apps.AppID("app1"),
			DisplayName: "App 1",
		},
		GrantedLocations: apps.Locations{
			apps.LocationChannelHeader,
			apps.LocationPostMenu,
			apps.LocationCommand,
		},
	}

	app1Bindings := func() []apps.Binding {
		return []apps.Binding{
			{
				Location: apps.LocationCommand,
				Bindings: []apps.Binding{
					{
						Location:    "baseCommandLocation",
						Label:       "baseCommandLabel",
						Icon:        "base command icon",
						Hint:        "base command hint",
						Description: "base command description",
						Bindings: []apps.Binding{
							{
								Location:    "message",
								Label:       "message",
								Icon:        "https://example.com/image.png",
								Hint:        "message command hint",
								Description: "message command description",
								Submit:      &apps.Call{Path: "/path"},
							}, {
								Location:    "message-modal",
								Label:       "message-modal",
								Icon:        "message-modal command icon",
								Hint:        "message-modal command hint",
								Description: "message-modal command description",
								Submit:      &apps.Call{Path: "/path"},
							}, {
								Location:    "manage",
								Label:       "manage",
								Icon:        "../some/invalid/path",
								Hint:        "manage command hint",
								Description: "manage command description",
								Bindings: []apps.Binding{
									{
										Location:    "subscribe",
										Label:       "subscribe",
										Icon:        "subscribe command icon",
										Hint:        "subscribe command hint",
										Description: "subscribe command description",
										Submit:      &apps.Call{Path: "/path"},
									}, {
										Location:    "unsubscribe",
										Label:       "unsubscribe",
										Icon:        "unsubscribe command icon",
										Hint:        "unsubscribe command hint",
										Description: "unsubscribe command description",
										Submit:      &apps.Call{Path: "/path"},
									},
								},
							},
						},
					},
				},
			},
		}
	}

	expectedApp1Bindings := app1Bindings()
	expectedApp1Bindings[0].Bindings[0].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/base command icon"
	expectedApp1Bindings[0].Bindings[0].Bindings[0].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Bindings[0].Icon = "https://example.com/image.png"
	expectedApp1Bindings[0].Bindings[0].Bindings[1].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Bindings[1].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/message-modal command icon"
	expectedApp1Bindings[0].Bindings[0].Bindings[2].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Bindings[2].Icon = ""
	expectedApp1Bindings[0].Bindings[0].Bindings[2].Bindings[0].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Bindings[2].Bindings[0].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/subscribe command icon"
	expectedApp1Bindings[0].Bindings[0].Bindings[2].Bindings[1].AppID = "app1"
	expectedApp1Bindings[0].Bindings[0].Bindings[2].Bindings[1].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/unsubscribe command icon"

	app2 := app1
	app2.AppID = apps.AppID("app2")
	app2.DisplayName = "App 2"

	app2Bindings := func() []apps.Binding {
		return []apps.Binding{
			{
				Location: apps.LocationCommand,
				Bindings: []apps.Binding{
					{
						Location:    "app2BaseCommandLocation",
						Label:       "app2BaseCommandLabel",
						Icon:        "app2 base command icon",
						Hint:        "app2 base command hint",
						Description: "app2 base command description",
						Bindings: []apps.Binding{
							{
								Location:    "connect",
								Label:       "connect",
								Icon:        "connect command icon",
								Hint:        "connect command hint",
								Description: "connect command description",
								Submit:      &apps.Call{Path: "/path"},
							},
						},
					},
				},
			},
		}
	}

	expectedApp2Bindings := app2Bindings()
	expectedApp2Bindings[0].Bindings[0].AppID = "app2"
	expectedApp2Bindings[0].Bindings[0].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app2/static/app2 base command icon"
	expectedApp2Bindings[0].Bindings[0].Bindings[0].AppID = "app2"
	expectedApp2Bindings[0].Bindings[0].Bindings[0].Icon = "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app2/static/connect command icon"

	app1TestData := bindingTestData{
		app:      app1,
		bindings: app1Bindings(),
	}

	app2TestData := bindingTestData{
		app:      app2,
		bindings: app2Bindings(),
	}

	expectedCombined := []apps.Binding{
		{
			Location: apps.LocationCommand,
			Bindings: append(expectedApp1Bindings[0].Bindings, expectedApp2Bindings[0].Bindings...),
		},
	}

	t.Run("Bindings from two enabled apps", func(t *testing.T) {
		testData := []bindingTestData{app1TestData, app2TestData}
		ctrl := gomock.NewController(t)
		proxy := newTestProxyForBindings(t, testData, ctrl)
		r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
		r.Log = utils.NewTestLogger()

		out, err := proxy.GetBindings(r, apps.Context{})
		require.NoError(t, err)

		EqualBindings(t, expectedCombined, out)
	})

	t.Run("Apps without granted locations doesn't get a request", func(t *testing.T) {
		app1TestData := app1TestData
		app1TestData.app.GrantedLocations = nil
		testData := []bindingTestData{app1TestData, app2TestData}

		ctrl := gomock.NewController(t)

		proxy := newTestProxyForBindings(t, testData, ctrl)
		r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
		r.Log = utils.NewTestLogger()

		out, err := proxy.GetBindings(r, apps.Context{})
		require.NoError(t, err)
		EqualBindings(t, expectedApp2Bindings, out)
	})

	t.Run("Disabled app doesn't get a request", func(t *testing.T) {
		d := app2TestData // clone
		d.app.Disabled = true
		testData := []bindingTestData{app1TestData, d}
		ctrl := gomock.NewController(t)

		proxy := newTestProxyForBindings(t, testData, ctrl)
		r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
		r.Log = utils.NewTestLogger()

		out, err := proxy.GetBindings(r, apps.Context{})
		require.NoError(t, err)
		EqualBindings(t, expectedApp1Bindings, out)
	})
}

func TestDuplicateCommand(t *testing.T) {
	testData := []bindingTestData{
		{
			app: apps.App{
				DeployType: apps.DeployBuiltin,
				Manifest: apps.Manifest{
					AppID:       apps.AppID("app1"),
					DisplayName: "App 1",
				},
				GrantedLocations: apps.Locations{
					apps.LocationCommand,
				},
			},
			bindings: []apps.Binding{
				{
					Location: apps.LocationCommand,
					Bindings: []apps.Binding{
						{
							Location:    "baseCommandLocation",
							Label:       "baseCommandLabel",
							Icon:        "base command icon",
							Hint:        "base command hint",
							Description: "base command description",
							Bindings: []apps.Binding{
								{
									Location: "sub1",
									Label:    "sub1",
									Icon:     "sub1 icon 1",
									Submit:   &apps.Call{Path: "/path"},
								},
								{
									Location: "sub1",
									Label:    "sub1",
									Icon:     "sub1 icon 2",
								},
								{
									Location: "",
									Label:    "",
									Icon:     "",
								},
							},
						},
					},
				},
				{
					Location: apps.LocationCommand,
					Bindings: []apps.Binding{
						{
							Location:    "",
							Label:       "",
							Icon:        "base2 command icon",
							Hint:        "base2 command hint",
							Description: "base2 command description",
						},
					},
				},
			},
		},
	}

	expected := []apps.Binding{
		{
			Location: apps.LocationCommand,
			Bindings: []apps.Binding{
				{
					AppID:       apps.AppID("app1"),
					Location:    "baseCommandLocation",
					Label:       "baseCommandLabel",
					Icon:        "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/base command icon",
					Hint:        "base command hint",
					Description: "base command description",
					Bindings: []apps.Binding{
						{
							AppID:    apps.AppID("app1"),
							Location: "sub1",
							Label:    "sub1",
							Icon:     "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/sub1 icon 1",
							Submit:   &apps.Call{Path: "/path"},
						},
					},
				},
			},
		},
	}

	ctrl := gomock.NewController(t)

	proxy := newTestProxyForBindings(t, testData, ctrl)
	r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
	r.Log = utils.NewTestLogger()
	out, err := proxy.GetBindings(r, apps.Context{})
	require.NoError(t, err)
	EqualBindings(t, expected, out)
}

func TestInvalidCommand(t *testing.T) {
	testData := []bindingTestData{
		{
			app: apps.App{
				DeployType: apps.DeployBuiltin,
				Manifest: apps.Manifest{
					AppID:       apps.AppID("app1"),
					DisplayName: "App 1",
				},
				GrantedLocations: apps.Locations{
					apps.LocationCommand,
				},
			},
			bindings: []apps.Binding{
				{
					Location: apps.LocationCommand,
					Bindings: []apps.Binding{
						{
							Location:    "baseCommandLocation",
							Label:       "baseCommandLabel",
							Icon:        "base command icon",
							Hint:        "base command hint",
							Description: "base command description",
							Bindings: []apps.Binding{
								{
									Location: "sub1",
									Label:    "sub1",
									Icon:     "sub1 icon 1",
									Submit:   &apps.Call{Path: "/path"},
								},
								{
									Location: "multiple word",
									Label:    "multiple word",
									Icon:     "sub1 icon 2",
								},
								{
									Location: "sub2",
									Label:    "multiple word",
									Icon:     "sub1 icon 1",
								},
							},
						},
					},
				},
			},
		},
	}

	expected := []apps.Binding{
		{
			Location: apps.LocationCommand,
			Bindings: []apps.Binding{
				{
					AppID:       apps.AppID("app1"),
					Location:    "baseCommandLocation",
					Label:       "baseCommandLabel",
					Icon:        "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/base command icon",
					Hint:        "base command hint",
					Description: "base command description",
					Bindings: []apps.Binding{
						{
							AppID:    apps.AppID("app1"),
							Location: "sub1",
							Label:    "sub1",
							Icon:     "https://test.mattermost.com/plugins/com.mattermost.apps/apps/app1/static/sub1 icon 1",
							Submit:   &apps.Call{Path: "/path"},
						},
					},
				},
			},
		},
	}

	ctrl := gomock.NewController(t)

	proxy := newTestProxyForBindings(t, testData, ctrl)
	r := incoming.NewRequest(proxy.conf, utils.NewTestLogger(), nil)
	r.Log = utils.NewTestLogger()
	out, err := proxy.GetBindings(r, apps.Context{})
	require.NoError(t, err)
	EqualBindings(t, expected, out)
}


// EqualBindings asserts that two slices of bindings are equal ignoring the order of the elements.
// If there are duplicate elements, the number of appearances of each of them in both lists should match.
//
// EqualBindings calls t.Fail if the elements not match.
func EqualBindings(t *testing.T, expected, actual []apps.Binding) {
	opt := cmpopts.SortSlices(func(a apps.Binding, b apps.Binding) bool {
		return a.AppID < b.AppID
	})

	if diff := cmp.Diff(expected, actual, opt); diff != "" {
		t.Errorf("Bindings mismatch (-expected +actual):\n%s", diff)
	}
}

}
